package org.example.services;

import jakarta.annotation.PostConstruct;
import org.example.entity.Speaker;
import org.example.entity.Tyre;
import org.example.entity.Vehicle;
import org.example.exceptions.VehicleListEmptyException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;


import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import org.example.exceptions.VehicleListEmptyException;

@Service
public class VehicleService {

    private final TyreService tyreService;
    private final SpeakerService speakerService;

    private List<Vehicle> vehicleList;

    @Autowired
    public VehicleService(TyreService tyreService, SpeakerService speakerService) {
        this.tyreService = tyreService;
        this.speakerService = speakerService;
    }

    /**
     * Five vehicles objects are created by the constructor of Vehicle class.
     * Tyre and Speaker are generated by TyreService and SpeakerService.
     * Vehicles are added to vehiclesList.
     * */
    @PostConstruct
    public void generateVehicleList() {
        vehicleList = new ArrayList<>();

        for (int i = 1; i <= 10; i++) {
            Tyre tyre = tyreService.generateTyre();
            Speaker speaker = speakerService.generateSpeaker();

            int vehiclePrice = tyre.getPrice() + speaker.getPrice() + (int)generateRandomPrice();

            Vehicle vehicle = new Vehicle(speaker, tyre, vehiclePrice);
            vehicleList.add(vehicle);
        }
    }

    public String findMostExpensiveVehicle() throws VehicleListEmptyException {
        Optional<Vehicle> expensiveVehicle = vehicleList.stream().max((v1, v2)->v2.getPrice()-v1.getPrice());
        if(expensiveVehicle.isEmpty()) throw new VehicleListEmptyException("List of Vehicles is Empty !!!");
        else return expensiveVehicle.get().toString();
    }

    private double generateRandomPrice() {
        return Math.random() * 50000 + 50000;
    }
}
